import React, { useMemo, useState } from "react";

/**
 * ⚠️ Aviso importante
 * Este componente NO replica el branding ni el menú oficial de Starbucks.
 * Es una plantilla educativa inspirada en categorías habituales de café/tienda en Perú,
 * con precios y artículos de ejemplo (PEN). Ajusta nombres, precios y fotos antes de usar.
 * No uses logos/marcas registradas sin permiso.
 */

// Datos de ejemplo (ajústalos a tu negocio)
// Ejemplo parcial: categorías con precios reales de Starbucks Perú (Rappi / Rappi delivery)
const CATEGORIES = [
  {
    id: "espresso_caliente",
    title: "Espresso Caliente",
    items: [
      { id: "americano", name: "Americano (Alto)", description: "Café espresso con agua caliente", sizes: [{ label: "Alto", price: 10.0 }] }, // :contentReference[oaicite:1]{index=1}
      { id: "latte", name: "Latte", description: "Café espresso con leche vaporizada", sizes: [{ label: "Regular", price: 13.0 }] }, // :contentReference[oaicite:2]{index=2}
      { id: "caramel_macchiato", name: "Caramel Macchiato", description: "Leche vaporizada con vainilla y espresso", sizes: [{ label: "Regular", price: 15.5 }] }, // :contentReference[oaicite:3]{index=3}
    ],
  },
  {
    id: "espresso_frio",
    title: "Espresso Frío",
    items: [
      { id: "latte_helado", name: "Latte Helado", description: "Café espresso con leche fría e hielo", sizes: [{ label: "Regular", price: 13.0 }] }, // :contentReference[oaicite:4]{index=4}
      { id: "americano_helado", name: "Americano Helado", description: "Espresso con agua e hielo", sizes: [{ label: "Regular", price: 11.0 }] }, // :contentReference[oaicite:5]{index=5}
      { id: "cinnamon_truffle", name: "Cinnamon Chocolate Truffle Latte", description: "Espresso con leche fría, salsa de chocolate y canela", sizes: [{ label: "Regular", price: 17.0 }] }, // :contentReference[oaicite:6]{index=6}
    ],
  },
  {
    id: "frappuccinos",
    title: "Frappuccinos",
    items: [
      { id: "caramel_frapp", name: "Caramel Frappuccino", description: "Frappuccino de café con caramelo y crema batida", sizes: [{ label: "Regular", price: 16.0 }] }, // :contentReference[oaicite:7]{index=7}
      { id: "algarrobina", name: "Algarrobina Creme Frappuccino", description: "Frappuccino peruano con jarabe de algarrobina", sizes: [{ label: "Regular", price: 15.5 }] }, // :contentReference[oaicite:8]{index=8}
      { id: "ultimate_caramel", name: "Ultimate Caramel Frappuccino", description: "Versión extra caramelo del clásico", sizes: [{ label: "Regular", price: 17.0 }] }, // :contentReference[oaicite:9]{index=9}
    ],
  },
  {
    id: "tes",
    title: "Tés",
    items: [
      { id: "te_chamoline", name: "Té Chamoline Teavana", description: "Té chamoline de la línea Teavana", sizes: [{ label: "Regular", price: 10.0 }] }, // :contentReference[oaicite:10]{index=10}
      { id: "te_mint", name: "Té Mint Citrus Teavana", description: "Té verde con limón, verbena y menta", sizes: [{ label: "Regular", price: 10.0 }] }, // :contentReference[oaicite:11]{index=11}
    ],
  },
  {
    id: "recién_horneados",
    title: "Recién Horneados",
    items: [
      { id: "croissant", name: "Croissant de Mantequilla", description: "Croissant de mantequilla horneado", sizes: [{ label: "Unidad", price: 7.0 }] }, // :contentReference[oaicite:12]{index=12}
    ],
  },
  {
    id: "sandwiches",
    title: "Sándwiches",
    items: [
      { id: "pavita_queso", name: "Sándwich Pavita & Queso", description: "Jamón de pavita y queso cheddar", sizes: [{ label: "Unidad", price: 14.5 }] }, // :contentReference[oaicite:13]{index=13}
      { id: "chicken_ciabatta", name: "Sándwich Chicken Ciabatta", description: "Pollo deshilachado en pan ciabatta", sizes: [{ label: "Unidad", price: 14.5 }] }, // :contentReference[oaicite:14]{index=14}
    ],
  },
];

const PEN = (n) => `S/ ${n.toFixed(2)}`;

function classNames(...xs) {
  return xs.filter(Boolean).join(" ");
}

export default function PeruCafeMenu() {
  const [query, setQuery] = useState("");
  const [activeCat, setActiveCat] = useState(CATEGORIES[0].id);
  const [cart, setCart] = useState([]);
  const [showCheckout, setShowCheckout] = useState(false);
  const [paymentMethod, setPaymentMethod] = useState("visa");
  const [customer, setCustomer] = useState({ name: "", email: "" });

  const filteredCategories = useMemo(() => {
    if (!query.trim()) return CATEGORIES;
    const q = query.toLowerCase();
    return CATEGORIES.map((cat) => ({
      ...cat,
      items: cat.items.filter(
        (it) =>
          it.name.toLowerCase().includes(q) ||
          it.description.toLowerCase().includes(q)
      ),
    })).filter((c) => c.items.length > 0);
  }, [query]);

  const active = filteredCategories.find((c) => c.id === activeCat) || filteredCategories[0];

  const subtotal = cart.reduce((acc, it) => acc + it.price * it.qty, 0);
  const igv = subtotal * 0.18; // 18% IGV Perú
  const total = subtotal + igv;

  function addToCart(item, size) {
    const key = `${item.id}-${size.label}`;
    setCart((prev) => {
      const idx = prev.findIndex((p) => p.key === key);
      if (idx >= 0) {
        const next = [...prev];
        next[idx] = { ...next[idx], qty: next[idx].qty + 1 };
        return next;
      }
      return [
        ...prev,
        {
          key,
          id: item.id,
          name: item.name,
          size: size.label,
          price: size.price,
          qty: 1,
        },
      ];
    });
  }

  function updateQty(key, delta) {
    setCart((prev) =>
      prev
        .map((it) => (it.key === key ? { ...it, qty: Math.max(0, it.qty + delta) } : it))
        .filter((it) => it.qty > 0)
    );
  }

  function clearCart() {
    setCart([]);
  }

  function handlePay(e) {
    e.preventDefault();
    // Simula pago exitoso
    alert(
      `Pago aprobado (simulado)\n\nCliente: ${customer.name}\nEmail: ${customer.email}\nMétodo: ${paymentMethod.toUpperCase()}\nTotal: ${PEN(total)}`
    );
    clearCart();
    setShowCheckout(false);
  }

  return (
    <div className="min-h-screen w-full bg-neutral-950 text-neutral-100">
      {/* Header */}
      <header className="sticky top-0 z-20 backdrop-blur bg-neutral-950/80 border-b border-neutral-800">
        <div className="max-w-6xl mx-auto px-4 py-4 flex items-center gap-4">
          <div className="w-10 h-10 rounded-2xl bg-neutral-800 grid place-items-center font-bold">☕</div>
          <div className="flex-1">
            <h1 className="text-xl sm:text-2xl font-semibold">Menú de Café – Perú</h1>
            <p className="text-xs text-neutral-400">Plantilla educativa (PEN). No oficial.</p>
          </div>
          <div className="hidden md:flex gap-2">
            {CATEGORIES.map((c) => (
              <button
                key={c.id}
                onClick={() => setActiveCat(c.id)}
                className={classNames(
                  "px-3 py-1.5 rounded-full text-sm border",
                  activeCat === c.id
                    ? "bg-neutral-100 text-neutral-900 border-neutral-100"
                    : "border-neutral-700 hover:border-neutral-500"
                )}
              >
                {c.title}
              </button>
            ))}
          </div>
          <div className="relative">
            <input
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              placeholder="Buscar bebida o snack..."
              className="bg-neutral-900 border border-neutral-700 rounded-xl px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-neutral-400 w-56"
            />
          </div>
          <button
            onClick={() => setShowCheckout(true)}
            className="ml-2 px-4 py-2 rounded-xl bg-neutral-100 text-neutral-900 text-sm font-medium"
            disabled={cart.length === 0}
            title={cart.length === 0 ? "Carrito vacío" : "Ir a pagar"}
          >
            Carrito • {cart.length}
          </button>
        </div>
      </header>

      {/* Body */}
      <main className="max-w-6xl mx-auto px-4 py-8 grid md:grid-cols-[1fr_360px] gap-8">
        {/* Listado */}
        <section>
          <div className="flex md:hidden gap-2 mb-4 overflow-x-auto no-scrollbar">
            {CATEGORIES.map((c) => (
              <button
                key={c.id}
                onClick={() => setActiveCat(c.id)}
                className={classNames(
                  "px-3 py-1.5 rounded-full text-sm border whitespace-nowrap",
                  activeCat === c.id
                    ? "bg-neutral-100 text-neutral-900 border-neutral-100"
                    : "border-neutral-700 hover:border-neutral-500"
                )}
              >
                {c.title}
              </button>
            ))}
          </div>

          {active ? (
            <div>
              <h2 className="text-lg font-semibold mb-4">{active.title}</h2>
              <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {active.items.map((it) => (
                  <article key={it.id} className="border border-neutral-800 rounded-2xl p-4 bg-neutral-900/50">
                    <div className="flex items-start justify-between gap-3">
                      <div>
                        <h3 className="font-medium text-base">{it.name}</h3>
                        <p className="text-xs text-neutral-400 mt-1">{it.description}</p>
                      </div>
                      <div className="w-12 h-12 rounded-xl bg-neutral-800 grid place-items-center text-lg">🥤</div>
                    </div>
                    <div className="mt-3 border-t border-neutral-800 pt-3 space-y-2">
                      {it.sizes.map((s) => (
                        <div key={s.label} className="flex items-center justify-between gap-3">
                          <div className="text-sm">
                            <span className="font-medium mr-2">{s.label}</span>
                            <span className="text-neutral-400">{PEN(s.price)}</span>
                          </div>
                          <button
                            onClick={() => addToCart(it, s)}
                            className="px-3 py-1.5 rounded-lg bg-neutral-100 text-neutral-900 text-xs font-semibold hover:brightness-95"
                          >
                            Agregar
                          </button>
                        </div>
                      ))}
                    </div>
                  </article>
                ))}
              </div>
            </div>
          ) : (
            <p className="text-sm text-neutral-400">No hay resultados para "{query}".</p>
          )}
        </section>

        {/* Carrito */}
        <aside className="border border-neutral-800 rounded-2xl p-4 h-fit sticky top-20 bg-neutral-900/50">
          <h3 className="font-semibold mb-3">Tu pedido</h3>
          {cart.length === 0 ? (
            <p className="text-sm text-neutral-400">Aún no has agregado productos.</p>
          ) : (
            <div className="space-y-3">
              {cart.map((it) => (
                <div key={it.key} className="flex items-center justify-between gap-3">
                  <div>
                    <div className="text-sm font-medium">{it.name} • {it.size}</div>
                    <div className="text-xs text-neutral-400">{PEN(it.price)} c/u</div>
                  </div>
                  <div className="flex items-center gap-2">
                    <button
                      onClick={() => updateQty(it.key, -1)}
                      className="w-7 h-7 rounded-lg border border-neutral-700 hover:border-neutral-500"
                      aria-label="Disminuir"
                    >
                      −
                    </button>
                    <div className="w-8 text-center text-sm">{it.qty}</div>
                    <button
                      onClick={() => updateQty(it.key, 1)}
                      className="w-7 h-7 rounded-lg border border-neutral-700 hover:border-neutral-500"
                      aria-label="Aumentar"
                    >
                      +
                    </button>
                  </div>
                </div>
              ))}
              <div className="border-t border-neutral-800 pt-3 space-y-1 text-sm">
                <div className="flex justify-between"><span>Subtotal</span><span>{PEN(subtotal)}</span></div>
                <div className="flex justify-between text-neutral-400"><span>IGV (18%)</span><span>{PEN(igv)}</span></div>
                <div className="flex justify-between font-semibold text-base pt-1"><span>Total</span><span>{PEN(total)}</span></div>
              </div>
              <div className="flex gap-2 pt-2">
                <button
                  onClick={() => setShowCheckout(true)}
                  className="flex-1 px-4 py-2 rounded-xl bg-neutral-100 text-neutral-900 text-sm font-semibold"
                >
                  Pagar
                </button>
                <button
                  onClick={clearCart}
                  className="px-4 py-2 rounded-xl border border-neutral-700 text-sm hover:border-neutral-500"
                >
                  Vaciar
                </button>
              </div>
            </div>
          )}
        </aside>
      </main>

      {/* Checkout modal */}
      {showCheckout && (
        <div className="fixed inset-0 z-30 grid place-items-center bg-black/70 p-4">
          <div className="w-full max-w-lg bg-neutral-950 border border-neutral-800 rounded-3xl p-6">
            <div className="flex items-start justify-between">
              <h3 className="text-lg font-semibold">Pago (simulado)</h3>
              <button onClick={() => setShowCheckout(false)} className="text-neutral-400 hover:text-neutral-200">✕</button>
            </div>

            <form className="mt-4 space-y-4" onSubmit={handlePay}>
              <div className="grid sm:grid-cols-2 gap-3">
                <label className="text-sm">
                  <span className="block mb-1 text-neutral-400">Nombre y apellido</span>
                  <input
                    required
                    value={customer.name}
                    onChange={(e) => setCustomer({ ...customer, name: e.target.value })}
                    className="w-full bg-neutral-900 border border-neutral-700 rounded-xl px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-neutral-400"
                    placeholder="Ej. Cristóbal Camino"
                  />
                </label>
                <label className="text-sm">
                  <span className="block mb-1 text-neutral-400">Email</span>
                  <input
                    type="email"
                    required
                    value={customer.email}
                    onChange={(e) => setCustomer({ ...customer, email: e.target.value })}
                    className="w-full bg-neutral-900 border border-neutral-700 rounded-xl px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-neutral-400"
                    placeholder="tucorreo@ejemplo.com"
                  />
                </label>
              </div>

              <fieldset className="space-y-2">
                <legend className="text-sm text-neutral-400 mb-1">Método de pago</legend>
                <div className="grid sm:grid-cols-3 gap-2 text-sm">
                  <label className="flex items-center gap-2 border border-neutral-700 rounded-xl px-3 py-2 cursor-pointer hover:border-neutral-500">
                    <input
                      type="radio"
                      name="pm"
                      value="visa"
                      checked={paymentMethod === "visa"}
                      onChange={() => setPaymentMethod("visa")}
                    />
                    <span>Visa</span>
                  </label>
                  <label className="flex items-center gap-2 border border-neutral-700 rounded-xl px-3 py-2 cursor-pointer hover:border-neutral-500">
                    <input
                      type="radio"
                      name="pm"
                      value="mastercard"
                      checked={paymentMethod === "mastercard"}
                      onChange={() => setPaymentMethod("mastercard")}
                    />
                    <span>Mastercard</span>
                  </label>
                  <label className="flex items-center gap-2 border border-neutral-700 rounded-xl px-3 py-2 cursor-pointer hover:border-neutral-500">
                    <input
                      type="radio"
                      name="pm"
                      value="amex"
                      checked={paymentMethod === "amex"}
                      onChange={() => setPaymentMethod("amex")}
                    />
                    <span>American Express</span>
                  </label>
                </div>
              </fieldset>

              <div className="grid sm:grid-cols-2 gap-3">
                <label className="text-sm">
                  <span className="block mb-1 text-neutral-400">Número de tarjeta</span>
                  <input
                    required
                    inputMode="numeric"
                    pattern="[0-9 ]{12,23}"
                    placeholder="0000 0000 0000 0000"
                    className="w-full bg-neutral-900 border border-neutral-700 rounded-xl px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-neutral-400"
                  />
                </label>
                <div className="grid grid-cols-2 gap-3">
                  <label className="text-sm">
                    <span className="block mb-1 text-neutral-400">Vencimiento</span>
                    <input
                      required
                      placeholder="MM/AA"
                      className="w-full bg-neutral-900 border border-neutral-700 rounded-xl px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-neutral-400"
                    />
                  </label>
                  <label className="text-sm">
                    <span className="block mb-1 text-neutral-400">CVV</span>
                    <input
                      required
                      inputMode="numeric"
                      pattern="[0-9]{3,4}"
                      placeholder="123"
                      className="w-full bg-neutral-900 border border-neutral-700 rounded-xl px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-neutral-400"
                    />
                  </label>
                </div>
              </div>

              <div className="border-t border-neutral-800 pt-3 text-sm space-y-1">
                <div className="flex justify-between"><span>Subtotal</span><span>{PEN(subtotal)}</span></div>
                <div className="flex justify-between text-neutral-400"><span>IGV (18%)</span><span>{PEN(igv)}</span></div>
                <div className="flex justify-between font-semibold text-base pt-1"><span>Total</span><span>{PEN(total)}</span></div>
              </div>

              <button
                type="submit"
                className="w-full px-4 py-3 rounded-2xl bg-neutral-100 text-neutral-900 font-semibold"
                disabled={cart.length === 0}
                title={cart.length === 0 ? "Agrega productos al carrito" : "Pagar ahora"}
              >
                Pagar {cart.length > 0 ? `• ${PEN(total)}` : ""}
              </button>

              <p className="text-xs text-neutral-500">Pago simulado para demos. Integra un PSP real (Niubiz/Culqi/MercadoPago/etc.) para cobros en producción.</p>
            </form>
          </div>
        </div>
      )}

      <footer className="max-w-6xl mx-auto px-4 pb-10 pt-4 text-xs text-neutral-500">
       Fran gay
      </footer>
    </div>
  );
}
